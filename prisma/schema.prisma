

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Category {
  COMMUNICATION_DEVICES
  COMPUTER_AND_IT_EQUIPMENT
  NETWORKING_EQUIPMENT
  SURVEILLANCE_AND_TRACKING
  VEHICLE_AND_ACCESSORIES
  PROTECTIVE_GEAR
  FIREARMS
  FORENSIC
  MEDICAL_FIRST_AID
  OFFICE_SUPPLIES
}


enum UserRole {
  ADMIN
  INCHARGE
  USER
}


model User {
  id                     String                 @id @default(cuid())
  govId                  String?  
  name                   String?
  email                  String?                @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole
  accounts               Account[]
  isTwoFactorEnabled     Boolean                @default(false)
  twoFactorConfirmation  TwoFactorConfirmation?
                // Government ID (optional)
  location               String?                // Location (optional)
  phone                  String?                // Phone number (optional)
   inventoryItems InventoryItem[]

}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String 
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
 
}

model VerificationToken {
  id        String  @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime
  
  @@unique([email, token])
}
model PasswordResetToken {
  id        String  @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime
  
  @@unique([email, token])
}
model TwoFactorToken {
  id        String  @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime
  
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String  @id @default(cuid())
  userId     String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}

model InventoryItem {
  id                  String     @id @default(cuid())
  itemId              String     @unique
  category            Category
  name                String
  description         String?
  quantity            Int        @default(1)
  location            String?
  condition           String     @default("new")
  acquisitionDate     DateTime?
  expiryDate          DateTime?
  price               Float?
  supplier            String?
  assignedTo          String?
  lastInspectionDate  DateTime?
  maintenanceSchedule String?

  userId              String?
  user                User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  communicationDevice CommunicationDevice?
  computerAndITEquipment ComputerAndITEquipment?
  networkingEquipment NetworkingEquipment?
  surveillanceAndTracking SurveillanceAndTracking?
  vehicleAndAccessories VehicleAndAccessories?
  protectiveGear ProtectiveGear?
  firearm Firearm?
  forensicEquipment ForensicEquipment?
  medicalFirstAid MedicalFirstAid?
  officeSupply OfficeSupply?
}

model CommunicationDevice {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  frequencyRange  String?
  batteryType     String?
  connectivity    String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model ComputerAndITEquipment {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  processor       String?
  RAM             String?
  storage         String?
  OS              String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model NetworkingEquipment {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  bandwidth       String?
  ports           String?
  protocols       String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model SurveillanceAndTracking {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  cameraResolution String?
  nightVision     Boolean  @default(false)
  GPSAccuracy     String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model VehicleAndAccessories {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  vehicleType     String?
  makeAndModel    String?
  licensePlate    String?
  engineCapacity  String?
  accessories     String[]

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model ProtectiveGear {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  protectionLevel String?
  size            String?
  material        String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model Firearm {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  caliber         String?
  ammoType        String?
  serialNumber    String?
  licenseDetails  String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model ForensicEquipment {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  usageType       String?
  sensitivity     String?
  storageRequirements String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model MedicalFirstAid {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  expirationDate  DateTime?
  dosage          String?
  storageConditions String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}

model OfficeSupply {
  id              String   @id @default(cuid())
  inventoryItemId String   @unique
  itemType        String?
  dimensions      String?
  material        String?

  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
}